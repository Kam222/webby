# requirements.txt
pandas==2.1.0
numpy==1.24.0
plotly==5.18.0
seaborn==0.13.0
matplotlib==3.8.0
scipy==1.11.0
statsmodels==0.14.0
networkx==3.2.0
scikit-learn==1.3.0
sqlalchemy==2.0.0
jupyter==1.0.0
ipywidgets==8.1.0
kaleido==0.2.1  # For static plotly exports

# analysis_pipeline.py
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
from statsmodels.stats.outliers_influence import variance_inflation_factor
import networkx as nx
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.ensemble import IsolationForest
from sqlalchemy import create_engine
import warnings
warnings.filterwarnings('ignore')

class DanceAnalysisVisualizer:
    def __init__(self, db_path='sqlite:///dance_competition.db'):
        """Initialize with database connection"""
        self.engine = create_engine(db_path)
        self.dark_theme = {
            'bgcolor': '#283442',
            'gridcolor': '#3b4754',
            'textcolor': '#ffffff'
        }
        
    def load_data(self):
        """Load data from database"""
        self.scores_df = pd.read_sql("""
            SELECT 
                s.score_id, s.performance_id, s.judge_id, s.score,
                p.week, p.season, d.dance_style_name,
                j.judge_name, cel.celebrity_name, pro.professional_name
            FROM scores s
            JOIN performances p ON s.performance_id = p.performance_id
            JOIN dance_styles d ON p.primary_dance_style_id = d.primary_dance_style_id
            JOIN judges j ON s.judge_id = j.judge_id
            JOIN couples c ON p.couple_id = c.couple_id
            JOIN celebrities cel ON c.celebrity_id = cel.celebrity_id
            JOIN professionals pro ON c.professional_id = pro.professional_id
        """, self.engine)
        
    def judge_heatmap(self):
        """Create judge scoring pattern heatmap"""
        pivot_scores = self.scores_df.pivot_table(
            values='score',
            index='judge_name',
            columns='dance_style_name',
            aggfunc='mean'
        )
        
        fig = px.imshow(
            pivot_scores,
            aspect='auto',
            color_continuous_scale='RdBu_r',
            title='Judge Scoring Patterns by Dance Style'
        )
        
        fig.update_layout(
            plot_bgcolor=self.dark_theme['bgcolor'],
            paper_bgcolor=self.dark_theme['bgcolor'],
            font_color=self.dark_theme['textcolor']
        )
        
        return fig
    
    def judge_distribution(self):
        """Create judge score distribution violin plot"""
        fig = go.Figure()
        
        for judge in self.scores_df['judge_name'].unique():
            judge_scores = self.scores_df[self.scores_df['judge_name'] == judge]['score']
            
            fig.add_trace(go.Violin(
                y=judge_scores,
                name=judge,
                box_visible=True,
                meanline_visible=True
            ))
            
        fig.update_layout(
            title='Score Distribution by Judge',
            yaxis_title='Score',
            plot_bgcolor=self.dark_theme['bgcolor'],
            paper_bgcolor=self.dark_theme['bgcolor'],
            font_color=self.dark_theme['textcolor']
        )
        
        return fig
    
    def temporal_analysis(self):
        """Create temporal analysis plot"""
        judge_trends = self.scores_df.groupby(
            ['season', 'week', 'judge_name']
        )['score'].mean().reset_index()
        
        fig = px.line(
            judge_trends,
            x='week',
            y='score',
            color='judge_name',
            facet_row='season',
            title='Judge Scoring Trends Over Time'
        )
        
        fig.update_layout(
            plot_bgcolor=self.dark_theme['bgcolor'],
            paper_bgcolor=self.dark_theme['bgcolor'],
            font_color=self.dark_theme['textcolor']
        )
        
        return fig
    
    def network_visualization(self):
        """Create judge-performer network visualization"""
        edges = self.scores_df.groupby(
            ['judge_name', 'celebrity_name']
        )['score'].mean().reset_index()
        
        G = nx.Graph()
        
        # Add nodes
        for judge in edges['judge_name'].unique():
            G.add_node(judge, node_type='judge')
        for celeb in edges['celebrity_name'].unique():
            G.add_node(celeb, node_type='celebrity')
            
        # Add edges
        for _, row in edges.iterrows():
            G.add_edge(
                row['judge_name'],
                row['celebrity_name'],
                weight=row['score']
            )
            
        # Calculate layout
        pos = nx.spring_layout(G)
        
        # Create plot
        fig = go.Figure()
        
        # Add edges
        edge_x = []
        edge_y = []
        for edge in G.edges():
            x0, y0 = pos[edge[0]]
            x1, y1 = pos[edge[1]]
            edge_x.extend([x0, x1, None])
            edge_y.extend([y0, y1, None])
            
        fig.add_trace(go.Scatter(
            x=edge_x,
            y=edge_y,
            line=dict(width=0.5, color='#888'),
            hoverinfo='none',
            mode='lines'
        ))
        
        # Add nodes
        node_x = []
        node_y = []
        node_color = []
        node_text = []
        
        for node in G.nodes():
            x, y = pos[node]
            node_x.append(x)
            node_y.append(y)
            node_color.append('#1f77b4' if G.nodes[node]['node_type'] == 'judge' else '#ff7f0e')
            node_text.append(node)
            
        fig.add_trace(go.Scatter(
            x=node_x,
            y=node_y,
            mode='markers+text',
            marker=dict(
                size=20,
                color=node_color
            ),
            text=node_text,
            hoverinfo='text'
        ))
        
        fig.update_layout(
            title='Judge-Celebrity Interaction Network',
            showlegend=False,
            plot_bgcolor=self.dark_theme['bgcolor'],
            paper_bgcolor=self.dark_theme['bgcolor'],
            font_color=self.dark_theme['textcolor']
        )
        
        return fig
    
    def anomaly_detection(self):
        """Create anomaly detection visualization"""
        # Prepare features
        pivot_scores = self.scores_df.pivot_table(
            values='score',
            index='performance_id',
            columns='judge_name'
        ).fillna(self.scores_df['score'].mean())
        
        # PCA for dimensionality reduction
        pca = PCA(n_components=2)
        scores_pca = pca.fit_transform(StandardScaler().fit_transform(pivot_scores))
        
        # Isolation Forest
        iso = IsolationForest(random_state=42)
        outliers = iso.fit_predict(pivot_scores) == -1
        
        # Create plot
        fig = go.Figure()
        
        # Add normal points
        fig.add_trace(go.Scatter(
            x=scores_pca[~outliers, 0],
            y=scores_pca[~outliers, 1],
            mode='markers',
            name='Normal',
            marker=dict(
                color='blue',
                size=8
            )
        ))
        
        # Add outliers
        fig.add_trace(go.Scatter(
            x=scores_pca[outliers, 0],
            y=scores_pca[outliers, 1],
            mode='markers',
            name='Anomalies',
            marker=dict(
                color='red',
                size=12,
                symbol='x'
            )
        ))
        
        fig.update_layout(
            title='Score Anomaly Detection',
            xaxis_title='PCA Component 1',
            yaxis_title='PCA Component 2',
            plot_bgcolor=self.dark_theme['bgcolor'],
            paper_bgcolor=self.dark_theme['bgcolor'],
            font_color=self.dark_theme['textcolor']
        )
        
        return fig
    
    def generate_report(self, output_dir='visualizations/'):
        """Generate complete visualization report"""
        import os
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            
        self.load_data()
        
        # Generate all visualizations
        visualizations = {
            'heatmap': self.judge_heatmap(),
            'distribution': self.judge_distribution(),
            'temporal': self.temporal_analysis(),
            'network': self.network_visualization(),
            'anomalies': self.anomaly_detection()
        }
        
        # Save all visualizations
        for name, fig in visualizations.items():
            fig.write_html(f"{output_dir}/{name}.html")
            fig.write_image(f"{output_dir}/{name}.png")
            
        return visualizations

# Example usage
if __name__ == "__main__":
    analyzer = DanceAnalysisVisualizer()
    visualizations = analyzer.generate_report()